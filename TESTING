The package comes with some unit tests to check the data GET and POST routines
looking to check scenarios with bad data.

This should be a simple test to check the headers, but it doesn't work:

$ curl -v http://localhost:4567/package-inventory/flugelpop/packages.json -H 'Content-Type: application/json' -d '{"hostname": "flugelbob", "packages": {"phonon-qt5-gstreamer": "4.9.", "my-package": "1.2.", "your-package": "4.5.6-0."}}'

Rack unit-test process.

$ ruby PackageInventoryServerTest.rb
oaded suite PackageInventoryServerTest
Started
GET: retrieved 3 packages.
.Removing cache file for invtest if it exists.
Flushing package entry for invtest
Removing cache file for invtest if it exists.
..

Finished in 0.024175165 seconds.
--------------------------------------------------------------------------------
3 tests, 8 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications
100% passed
--------------------------------------------------------------------------------
124.09 tests/s, 330.92 assertions/s

RestClient upload test,

$ ruby post-host-packages.rb
{"hostname":"my-host","packages":[{"phonon-qt5-gstreamer":"4.9."},{"my-package":"1.2."},{"your-package":"4.5.6-0."}]}

The test will fail if the cache file for the host does not exist; the test
will complete if run again. I'm working on it.

=======================================================

Python cient-server testing
=====================================

The database needs to the following structure:

hosts
-----
id INT PK NN
name CHAR
description TEXT
active BOOLEAN

packages
--------
id INT PK NN
name CHAR

package_architectures
---------------------
id INT PK NN
name CHAR
description CHAR

package_versions
----------------
id INT PK NN
name CHAR
package_id INT REFS packages
package_architecture_id INT REFS package_architectures

-- Data preparation
DELETE FROM host_package_versions WHERE host_id = '836' AND package_version_id = '1523';
DELETE FROM hosts WHERE id = '836';
DELETE FROM package_versions WHERE id IN ( '1523', '1524' );
DELETE FROM packages WHERE id IN ( '2493', '2494', '2495' );
DELETE FROM package_architectures WHERE name = 'Unknown' OR id = '5';

INSERT INTO package_architectures(id, name, created_at, updated_at)
  VALUES('5', 'Unknown', NOW(), NOW());
INSERT INTO hosts(id, name, description, location_id)
  VALUES('836', 'invtest', 'invtest server', '1');
INSERT INTO packages(id, name, description, created_at, updated_at)
  VALUES('2493', 'my-package', 'My Package', NOW(), NOW());
INSERT INTO package_versions(id, name, package_id, package_architecture_id, created_at, updated_at)
  VALUES('1523', '1.2.3', '2493', '5', NOW(), NOW());
INSERT INTO packages(id, name, description, created_at, updated_at)
  VALUES('2494', 'your-package', 'My Package', NOW(), NOW());
INSERT INTO package_versions(id, name, package_id, package_architecture_id, created_at, updated_at)
  VALUES('1524', '4.5.6', '2494', '5', NOW(), NOW());
INSERT INTO host_package_versions(host_id, package_version_id) VALUES('836', '1523');

The download client works as a callout service in front of the database
issuing requests to the inventory (cache) service for packages installed on
a host. It needs to determine whether the host-package-version data it receives
should trigger the creation of new database records for packages and versions;
it will not create new host records.
The following query can be used to determine what actions need to be
performed.
-- Get a count of the number of installs of the package version on the hostname
-- Anything over zero indicates it is installed
SELECT SUM(hostcount), SUM(pvcount), SUM(pkgcount)
FROM (
SELECT COUNT(h.id) AS hostcount,
          0 AS pvcount,
          0 AS pkgcount
FROM hosts h
  INNER JOIN host_package_versions hpv
    ON h.id = hpv.host_id
  INNER JOIN package_versions pv
      ON hpv.package_version_id = pv.id
  INNER JOIN packages p
      ON p.id = pv.package_id
WHERE h.name = 'invtest'
  AND pv.name = '1.2'
  AND p.name = 'my-package'
UNION
SELECT 0 AS hostcount,
       COUNT(pv.id) AS pvcount,
       0 AS pkgcount
FROM package_versions pv
  INNER JOIN packages p
    ON p.id = pv.package_id
WHERE pv.name = '1.2'
  AND p.name = 'my-package'
UNION
-- Get a count of the number of matching packages
SELECT 0 AS hostcount,
      0 AS pvcount,
      COUNT(p.id) AS pkgcount
FROM packages p
WHERE p.name = 'my-package') AS t3;

# There are four valid tuples we should receive from the query
# (1, 1, 1): version of the package is installed on the host: associate version with host
# (0, 1, 1): version of the package exists but is not installed: create new version
# (0, 0, 1): version of the package does not exist: create new version
# (0, 0, 0): no reference to package in database: create package, version and host mapping

To verify that the seed data on the cache results in the expected content in the
database, the package database server python Flask server is intended to be used
for testing the download client and developing some examples of unittest.
Unit test
=========
Create some sample database entries, start the inventory database service and
check that it returns the expected results.

Integration test
================
These tests will consist of posting data to the caching server and then
requesting it using the download client to get it into the database and then
requesting it from the database server.
